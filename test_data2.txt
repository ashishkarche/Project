Main.java - 
/**
 * The Main class in the com.securefile package creates and shows a login GUI using Swing.
 */
package com.securefile;

import javax.swing.*;

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(GUI::createAndShowLoginGUI);
    }
}


GUI.java - 
/**
 * The `GUI` class in the `com.securefile` package contains methods to create and display graphical
 * user interfaces for login, registration, dashboard, and file upload functionalities.
 */
package com.securefile;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.security.GeneralSecurityException;

public class GUI {
    private static JFrame loginFrame;
    private static JTextField usernameField;
    private static JPasswordField passwordField;
    private static JFrame registrationFrame;
    private static JTextField regEmailField;
    private static JTextField regUsernameField;
    private static JPasswordField regPasswordField;
    private static JFrame fileUploadFrame;
    private static JLabel uploadLabel;
    private static JLabel passwordLengthLabel;

    public static String ImagePath = "src/main/resources/plus.png"; // Replace Image Path with your Image path

    // Create a flag to track email verification
    public static AtomicBoolean emailVerified = new AtomicBoolean(false);

    public static void createAndShowLoginGUI() {
        // Create the main login frame
        loginFrame = new JFrame("Login");
        loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        loginFrame.setSize(500, 500);
        loginFrame.setLayout(new GridBagLayout());

        // Create login components
        JLabel loginLabel = new JLabel("LOGIN");
        loginLabel.setFont(new Font("Arial", Font.BOLD, 20));
        usernameField = new JTextField(20);
        passwordField = new JPasswordField(20);
        JButton loginButton = new JButton("Login");
        JButton registerButton = new JButton("Don't have an account? Register");

        // Create dropdown for user/admin selection
        String[] userTypes = { "User", "Admin" };
        JComboBox<String> userTypeComboBox = new JComboBox<>(userTypes);

        GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(10, 10, 10, 10);
        c.gridwidth = 2;
        c.gridx = 0;
        c.gridy = 0;
        c.anchor = GridBagConstraints.CENTER;
        loginFrame.add(loginLabel, c);

        c.gridwidth = 1;
        c.gridy = 1;
        c.anchor = GridBagConstraints.CENTER;
        loginFrame.add(new JLabel("Username:"), c);
        c.gridy = 2;
        loginFrame.add(new JLabel("Password:"), c);
        c.gridy = 3;
        loginFrame.add(new JLabel("User Type:"), c);
        c.gridwidth = 2;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridy = 1;
        c.gridx = 1;
        loginFrame.add(usernameField, c);
        c.gridy = 2;
        loginFrame.add(passwordField, c);
        c.gridy = 3;
        loginFrame.add(userTypeComboBox, c);
        c.gridy = 4;
        c.gridx = 0;
        c.gridwidth = 2;
        loginFrame.add(loginButton, c);
        c.gridy = 5;
        loginFrame.add(registerButton, c);

        // Create the registration frame
        registrationFrame = new JFrame("Registration");
        registrationFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        registrationFrame.setSize(500, 500);
        registrationFrame.setLayout(new GridBagLayout());

        // Create registration components
        JLabel registerLabel = new JLabel("Register");
        regEmailField = new JTextField(20);
        regUsernameField = new JTextField(20);
        regPasswordField = new JPasswordField(20);
        JButton regRegisterButton = new JButton("Register");
        JButton backButton = new JButton("Back to Login");
        JButton emailVerifyButton = new JButton("Verify Email");

        passwordLengthLabel = new JLabel();

        c.insets = new Insets(10, 10, 10, 10);
        c.gridwidth = 2;
        c.gridx = 0;
        c.gridy = 0;
        c.anchor = GridBagConstraints.CENTER;
        registrationFrame.add(registerLabel, c);

        c.gridwidth = 1;
        c.gridy = 1;
        c.anchor = GridBagConstraints.CENTER;
        registrationFrame.add(new JLabel("Email:"), c);
        c.gridy = 2;
        registrationFrame.add(new JLabel("Username:"), c);
        c.gridy = 3;
        registrationFrame.add(new JLabel("New Password:"), c);
        c.gridwidth = 2;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.gridy = 1;
        c.gridx = 1;
        registrationFrame.add(regEmailField, c);
        c.gridy = 2;
        registrationFrame.add(regUsernameField, c);
        c.gridy = 3;
        registrationFrame.add(regPasswordField, c);
        c.gridy = 4;
        c.gridx = 0;
        c.gridwidth = 2;
        registrationFrame.add(regRegisterButton, c);
        c.gridy = 5;
        registrationFrame.add(backButton, c);
        c.gridy = 6;
        registrationFrame.add(passwordLengthLabel, c);
        c.gridy = 7;
        registrationFrame.add(emailVerifyButton, c);

        // Create the file upload frame
        fileUploadFrame = new JFrame("File Upload");
        fileUploadFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        fileUploadFrame.setSize(500, 500);
        fileUploadFrame.setLayout(new GridBagLayout());

        JLabel plusSignLabel = new JLabel(new ImageIcon(ImagePath));
        uploadLabel = new JLabel("Select File");
        uploadLabel.setFont(new Font("Arial", Font.BOLD, 12));
        JButton encryptButton = new JButton("Upload file");

        c.insets = new Insets(10, 10, 20, 10);
        c.gridwidth = 2;
        c.gridx = 0;
        c.gridy = 0;
        c.anchor = GridBagConstraints.CENTER;
        fileUploadFrame.add(plusSignLabel, c);

        c.gridy = 1;
        c.fill = GridBagConstraints.HORIZONTAL;
        c.anchor = GridBagConstraints.CENTER;
        fileUploadFrame.add(uploadLabel, c);

        c.gridy = 2;
        c.anchor = GridBagConstraints.CENTER;
        fileUploadFrame.add(encryptButton, c);

        // Initially, hide the frames
        registrationFrame.setVisible(false);
        fileUploadFrame.setVisible(false);

        Backend.initializeEncryptionKeys();

        // Action listeners
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                char[] passwordChars = passwordField.getPassword();
                String password = new String(passwordChars);
                String userType = (String) userTypeComboBox.getSelectedItem();

                // Get the IP address
                String ipAddress = Backend.getIpAddress();

                if (userType.equals("User")) {
                    // Perform user login authentication
                    if (Backend.authenticateUser(username, password, ipAddress)) {
                        // Login successful, show user dashboard
                        createAndShowDashboardGUI(username);
                        loginFrame.setVisible(false);
                    } else {
                        JOptionPane.showMessageDialog(loginFrame, "Invalid username or password", "Login Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } else if (userType.equals("Admin")) {
                    // Perform admin login authentication
                    if (Backend.authenticateAdmin(username, password)) {
                        // Admin login successful, show admin dashboard
                        createAndShowAdminDashboardGUI();
                        loginFrame.setVisible(false);
                    } else {
                        JOptionPane.showMessageDialog(loginFrame, "Invalid admin credentials", "Login Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        });

        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                registrationFrame.setVisible(true);
                loginFrame.setVisible(false);
            }
        });

        regRegisterButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                if (!emailVerified.get()) {
                    // Display an alert if email is not verified
                    JOptionPane.showMessageDialog(registrationFrame, "Please verify your email address.",
                            "Email Verification Required",
                            JOptionPane.WARNING_MESSAGE);
                    return;
                }
                String email = regEmailField.getText(); // Retrieve email
                String username = regUsernameField.getText();
                char[] passwordChars = regPasswordField.getPassword();
                String password = new String(passwordChars);
                String ipAddress = Backend.getIpAddress();

                // Check if the email is already registered
                if (Backend.isEmailRegistered(email)) {
                    JOptionPane.showMessageDialog(registrationFrame, "Email already registered", "Registration Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Check if the username is already taken
                if (Backend.isUsernameTaken(username)) {
                    JOptionPane.showMessageDialog(registrationFrame, "Username already taken", "Registration Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (password.length() != 8) { // Check password length
                    passwordLengthLabel.setText("Password should be 8 characters long");
                    return;
                } else {
                    passwordLengthLabel.setText(""); // Clear password length message
                }

                // Register the user
                if (Backend.registerUser(email, username, password,ipAddress)) { // Register user with email
                    JOptionPane.showMessageDialog(registrationFrame, "Registration successful", "Registration",
                            JOptionPane.INFORMATION_MESSAGE);
                    registrationFrame.setVisible(false);
                    loginFrame.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(registrationFrame, "Registration failed", "Registration Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loginFrame.setVisible(true);
                registrationFrame.setVisible(false);
            }
        });

        // Action listener for email verification button
        emailVerifyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String emailAddress = regEmailField.getText();
                if (Backend.isValidEmail(emailAddress)) {
                    // Open the SendGrid signup page for email verification
                    try {
                        Desktop.getDesktop().browse(new URI("https://signup.sendgrid.com/"));
                        // Set email verification flag to true
                        emailVerified.set(true);
                        // Enable the register button
                        regRegisterButton.setEnabled(true);
                    } catch (IOException | URISyntaxException ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(registrationFrame, "Error opening browser.", "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(registrationFrame, "Invalid email address.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        encryptButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String filePath = (String) plusSignLabel.getClientProperty("filePath");
                // Get the currently logged-in user's ID
                int userId = UserSession.getInstance().getUserId();

                if (filePath != null && !filePath.isEmpty()) {
                    try {
                        // Check if the file already exists on the server
                        boolean fileExists = Backend.doesFileExist(Paths.get(filePath).getFileName().toString(),
                                userId);

                        if (fileExists) {
                            JOptionPane.showMessageDialog(fileUploadFrame, "File already exists",
                                    "File Exists", JOptionPane.WARNING_MESSAGE);
                            return; // Exit the method without further processing
                        }

                        File selectedFile = new File(filePath);
                        byte[] fileData = Files.readAllBytes(selectedFile.toPath());

                        // Encrypt the file data using AES and DES
                        byte[] combinedEncryptedData = Backend.encryptFileData(fileData);

                        // Upload the file and encrypted data to the server
                        Backend.uploadFileToServer(filePath, combinedEncryptedData, userId);

                        // Show upload success message
                        JOptionPane.showMessageDialog(fileUploadFrame, "File uploaded successfully!",
                                "Upload Successful", JOptionPane.INFORMATION_MESSAGE);

                        // Close the file upload frame
                        fileUploadFrame.dispose();

                        // Show the dashboard
                        createAndShowDashboardGUI(UserSession.getInstance().getUsername());

                    } catch (IOException | GeneralSecurityException ex) {
                        ex.printStackTrace();
                        uploadLabel.setText("Error during encryption or uploading file.");
                    }
                } else {
                    uploadLabel.setText("No file selected.");
                }
            }
        });

        plusSignLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
                int result = fileChooser.showOpenDialog(fileUploadFrame);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();

                    // Store the file path in a variable
                    String filePath = selectedFile.getAbsolutePath();

                    // Update the uploadLabel
                    uploadLabel.setText("File Selected: " + selectedFile.getName());

                    // Set the file path in the plusSignLabel's client property
                    plusSignLabel.putClientProperty("filePath", filePath);
                }
            }
        });

        // Display the login frame
        loginFrame.setVisible(true);
    }

    public static void createAndShowDashboardGUI(String username) {
        JFrame dashboardFrame = new JFrame("Dashboard - " + username);
        dashboardFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        dashboardFrame.setSize(800, 600);

        JPanel dashboardPanel = new JPanel(new BorderLayout());
        dashboardFrame.add(dashboardPanel);

        // Add the plus.png icon in the right-hand corner
        ImageIcon plusIcon = new ImageIcon(ImagePath);
        Image smallPlusImage = plusIcon.getImage().getScaledInstance(25, 25, Image.SCALE_SMOOTH);
        ImageIcon smallPlusIcon = new ImageIcon(smallPlusImage);
        JLabel plusLabel = new JLabel(smallPlusIcon);
        plusLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        dashboardPanel.add(plusLabel, BorderLayout.NORTH);

        JTable fileTable = new JTable(new FileTableModel());
        dashboardPanel.add(new JScrollPane(fileTable), BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel();
        dashboardPanel.add(buttonPanel, BorderLayout.SOUTH);

        JButton shareButton = new JButton("Share");
        buttonPanel.add(shareButton);

        JButton downloadButton = new JButton("Download");
        buttonPanel.add(downloadButton);

        JButton deleteButton = new JButton("Delete");
        buttonPanel.add(deleteButton);
        dashboardPanel.add(buttonPanel, BorderLayout.SOUTH);

        // Add logout button in the bottom right corner
        JButton logoutButton = new JButton("Logout");
        buttonPanel.add(logoutButton);
        dashboardPanel.add(buttonPanel, BorderLayout.SOUTH);

        dashboardFrame.setVisible(true);

        downloadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = fileTable.getSelectedRow();
                if (selectedRow != -1) {
                    int fileId = (int) fileTable.getValueAt(selectedRow, 0);
                    // Get the user ID from the session
                    int userId = UserSession.getInstance().getUserId();

                    // Download the encrypted file from the server
                    byte[] encryptedData = Backend.downloadEncryptedFileFromServer(fileId, userId);

                    if (encryptedData != null) {
                        try {
                            // Decrypt the encrypted data
                            byte[] decryptedData = Backend.decryptFileData(encryptedData);

                            // Choose a location to save the decrypted file
                            JFileChooser fileChooser = new JFileChooser();
                            fileChooser.setDialogTitle("Save File");
                            int userSelection = fileChooser.showSaveDialog(null);

                            if (userSelection == JFileChooser.APPROVE_OPTION) {
                                File decryptedFile = fileChooser.getSelectedFile();

                                // Write the decrypted data to the selected file
                                Files.write(decryptedFile.toPath(), decryptedData);

                                JOptionPane.showMessageDialog(dashboardFrame,
                                        "File Saved: " + decryptedFile.getAbsolutePath(),
                                        "Download Successful", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(dashboardFrame, "Download canceled or file not saved.",
                                        "Download Canceled", JOptionPane.WARNING_MESSAGE);
                            }
                        } catch (GeneralSecurityException | IOException ex) {
                            ex.printStackTrace();
                            JOptionPane.showMessageDialog(dashboardFrame,
                                    "Error during decryption or file saving.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(dashboardFrame, "Error: Unable to download the encrypted file.",
                                "Download Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(dashboardFrame, "Please select a file to download.",
                            "No File Selected",
                            JOptionPane.WARNING_MESSAGE);
                }
            }
        });

        shareButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Get the selected row in the table
                int selectedRow = fileTable.getSelectedRow();
                if (selectedRow != -1) {

                    int fileId = (int) fileTable.getValueAt(selectedRow, 0);
                    // Retrieve the file name from the selected row
                    String fileName = (String) fileTable.getValueAt(selectedRow, 1);

                    // Get the current user's ID
                    int userId = UserSession.getInstance().getUserId();

                    // Set the expiry time for the download link (in minutes)
                    String linkExpiryTime = "60"; // Change this as needed

                    // Prompt the user to enter the receiver's email address
                    String receiverEmail = JOptionPane.showInputDialog(dashboardFrame, "Enter receiver's email:");

                    if (receiverEmail != null && !receiverEmail.isEmpty()) {
                        // Generate the download link for the file
                        String downloadLink = Backend.generateDownloadLink(fileName, fileId, userId, linkExpiryTime);

                        // Send an email to the receiver with the download link
                        Backend.sendEmail(receiverEmail, UserSession.getInstance().getEmail(),
                                "Download file from: " + downloadLink);

                        // Show a confirmation message to the user
                        JOptionPane.showMessageDialog(dashboardFrame, "Email sent to " + receiverEmail,
                                "Email Sent", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        // If the user cancels or leaves the email field empty
                        JOptionPane.showMessageDialog(dashboardFrame, "Receiver's email is required",
                                "Email Required", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    // If no file is selected
                    JOptionPane.showMessageDialog(dashboardFrame, "Please select a file to share.",
                            "No File Selected", JOptionPane.WARNING_MESSAGE);
                }
            }
        });

        plusLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileUploadFrame.setVisible(true);
                dashboardFrame.setVisible(false);
            }
        });

        // The window listener to the `fileUploadFrame` in Java Swing. When the
        // window is closing, it will make the `dashboardFrame` visible.
        fileUploadFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                dashboardFrame.setVisible(true);
            }
        });

        logoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Logout the user
                UserSession.getInstance().logoutUser();

                clearLoginFields();

                // Close file upload frame
                dashboardFrame.dispose();

                // Show login frame
                loginFrame.setVisible(true);
            }
        });

        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = fileTable.getSelectedRow();
                if (selectedRow != -1) {
                    int fileId = (int) fileTable.getValueAt(selectedRow, 0);
                    String fileName = (String) fileTable.getValueAt(selectedRow, 1);
                    boolean deleted = Backend.deleteFileFromServer(fileId, fileName);
                    if (deleted) {
                        // Refresh the table
                        ((FileTableModel) fileTable.getModel()).refreshData();
                        JOptionPane.showMessageDialog(dashboardFrame, "File deleted successfully.");
                    } else {
                        JOptionPane.showMessageDialog(dashboardFrame, "Error deleting file.", "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(dashboardFrame, "Please select a file to delete.", "Warning",
                            JOptionPane.WARNING_MESSAGE);
                }
            }
        });

    }

    private static class FileTableModel extends AbstractTableModel {
        private String[] columnNames = { "File No.", "File Name" };
        private List<Object[]> data;
        // Get the current user ID from the session
        int userId = UserSession.getInstance().getUserId();

        public FileTableModel() {
            this.data = fetchData();
        }

        private List<Object[]> fetchData() {
            Object[][] fetchedData = Backend.fetchFileData(userId);
            List<Object[]> dataList = new ArrayList<>();
            for (Object[] row : fetchedData) {
                dataList.add(row);
            }
            return dataList;
        }

        public void refreshData() {
            this.data = fetchData();
            fireTableDataChanged();
        }

        @Override
        public int getRowCount() {
            return data.size();
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return data.get(rowIndex)[columnIndex];
        }
    }

    private static void clearLoginFields() {
        usernameField.setText("");
        passwordField.setText("");
    }

    public static void createAndShowAdminDashboardGUI() {
        JFrame adminDashboardFrame = new JFrame("Admin Dashboard");
        adminDashboardFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        adminDashboardFrame.setSize(800, 600);

        JPanel adminDashboardPanel = new JPanel(new BorderLayout());
        adminDashboardFrame.add(adminDashboardPanel);

        // Fetch users data from the database initially
        Object[][] userData = Backend.fetchAllUsersData();
        String[] columnNames = { "User ID", "Username", "Email" };

        JTable userTable = new JTable(userData, columnNames);
        JScrollPane scrollPane = new JScrollPane(userTable);
        adminDashboardPanel.add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton deleteUserButton = new JButton("Delete User");
        buttonPanel.add(deleteUserButton);
        adminDashboardPanel.add(buttonPanel, BorderLayout.SOUTH);

        // Add logout button in the bottom right corner
        JButton logoutButton = new JButton("Logout");
        buttonPanel.add(logoutButton);
        adminDashboardPanel.add(buttonPanel, BorderLayout.SOUTH);

        deleteUserButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = userTable.getSelectedRow();
                if (selectedRow != -1) {
                    int userId = (int) userTable.getValueAt(selectedRow, 0);
                    deleteUser(adminDashboardFrame, userId, userTable, selectedRow);
                } else {
                    JOptionPane.showMessageDialog(adminDashboardFrame, "Please select a user to delete.",
                            "Warning", JOptionPane.WARNING_MESSAGE);
                }
            }
        });

        logoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Logout the user
                UserSession.getInstance().logoutUser();

                clearLoginFields();

                // Close file upload frame
                adminDashboardFrame.dispose();

                // Show login frame
                loginFrame.setVisible(true);
            }
        });

        adminDashboardFrame.setVisible(true);
    }

    private static void deleteUser(JFrame adminDashboardFrame, int userId, JTable userTable, int selectedRow) {
        boolean deleted = Backend.deleteUser(userId);
        if (deleted) {
            JOptionPane.showMessageDialog(adminDashboardFrame, "User deleted successfully.");
            // Refresh the table
            refreshUserTable(userTable, selectedRow);
        } else {
            JOptionPane.showMessageDialog(adminDashboardFrame, "Error deleting user.", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private static void refreshUserTable(JTable userTable, int selectedRow) {
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        model.setRowCount(0); // Clear existing data
        Object[][] userData = Backend.fetchAllUsersData();
        for (Object[] row : userData) {
            model.addRow(row);
        }
        // Select the next row after deletion
        if (selectedRow < model.getRowCount()) {
            userTable.setRowSelectionInterval(selectedRow, selectedRow);
        } else if (selectedRow > 0) {
            userTable.setRowSelectionInterval(selectedRow - 1, selectedRow - 1);
        }
    }

}


backend.java - 
/**
 * The `Backend` class in the `com.securefile` package provides functionality for user authentication,
 * file encryption/decryption, database operations, and file management in a secure file storage
 * application.
 */
package com.securefile;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.GeneralSecurityException;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

import java.security.MessageDigest;
import java.util.Base64;
import java.util.List;
import java.util.Properties;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.sql.Timestamp;

import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

public class Backend {
    // Database Connection Constants
    private static final String DB_URL = "jdbc:mysql://localhost:3306/filedatabase";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = ""; // Replace with your database password

    // Table Names
    private static final String USER_TABLE = "users";
    private static final String ENCRYPTED_FILES_TABLE = "encrypted_files";
    private static final String KEY_TABLE = "keys";

    // Encryption Keys
    private static SecretKey aesSecretKey;
    private static SecretKey desSecretKey;

    // User session
    private static UserSession userSession = UserSession.getInstance();

    // Initialize encryption keys
    public static void initializeEncryptionKeys() {
        try {
            // Check if keys are already stored in the database
            aesSecretKey = retrieveKey("aes_key");
            desSecretKey = retrieveKey("des_key");

            // If keys are not found in the database, generate new ones
            if (aesSecretKey == null) {
                aesSecretKey = generateKey("AES");
                storeKey("aes_key", aesSecretKey);
            }
            if (desSecretKey == null) {
                desSecretKey = generateKey("DES");
                storeKey("des_key", desSecretKey);
            }
        } catch (GeneralSecurityException | SQLException e) {
            e.printStackTrace();
        }
    }

    // Generate a new secret key
    private static SecretKey generateKey(String algorithm) throws NoSuchAlgorithmException {
        KeyGenerator keyGen = KeyGenerator.getInstance(algorithm);
        return keyGen.generateKey();
    }

    // Store a secret key in the database
    private static void storeKey(String keyName, SecretKey key) throws SQLException {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                PreparedStatement statement = connection
                        .prepareStatement("INSERT INTO `" + KEY_TABLE + "` (key_name, key_data) VALUES (?, ?)")) {
            statement.setString(1, keyName);
            statement.setBytes(2, serialize(key));
            statement.executeUpdate();
        }
    }

    // Retrieve a secret key from the database
    private static SecretKey retrieveKey(String keyName) throws SQLException {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                PreparedStatement statement = connection
                        .prepareStatement("SELECT key_data FROM `" + KEY_TABLE + "` WHERE key_name = ?")) {
            statement.setString(1, keyName);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return (SecretKey) deserialize(resultSet.getBytes("key_data"));
                }
            }
        }
        return null;
    }

    // Serialize an object into a byte array
    private static byte[] serialize(Object object) {
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(bos)) {
            oos.writeObject(object);
            return bos.toByteArray();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    // Deserialize a byte array into an object
    private static Object deserialize(byte[] bytes) {
        try (ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
                ObjectInputStream ois = new ObjectInputStream(bis)) {
            return ois.readObject();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static byte[] encryptFileData(byte[] fileData) throws GeneralSecurityException, IOException {
        byte[] encryptedDataAES = encrypt(fileData, aesSecretKey, "AES");
        byte[] encryptedDataDES = encrypt(fileData, desSecretKey, "DES");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        outputStream.write(encryptedDataAES);
        outputStream.write(encryptedDataDES);
        return outputStream.toByteArray();
    }

    public static byte[] decryptFileData(byte[] encryptedData) throws GeneralSecurityException, IOException {
        int halfLength = encryptedData.length / 2;
        byte[] encryptedDataAES = Arrays.copyOfRange(encryptedData, 0, halfLength);
        byte[] encryptedDataDES = Arrays.copyOfRange(encryptedData, halfLength, encryptedData.length);
        byte[] decryptedDataAES = decrypt(encryptedDataAES, aesSecretKey, "AES");
        byte[] decryptedDataDES = decrypt(encryptedDataDES, desSecretKey, "DES");
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        outputStream.write(decryptedDataAES);
        outputStream.write(decryptedDataDES);
        return outputStream.toByteArray();
    }

    private static byte[] encrypt(byte[] data, SecretKey key, String algorithm) throws GeneralSecurityException {
        Cipher cipher = Cipher.getInstance(algorithm);
        cipher.init(Cipher.ENCRYPT_MODE, key);
        return cipher.doFinal(data);
    }

    private static byte[] decrypt(byte[] encryptedData, SecretKey key, String algorithm)
            throws GeneralSecurityException {
        Cipher cipher = Cipher.getInstance(algorithm);
        cipher.init(Cipher.DECRYPT_MODE, key);
        return cipher.doFinal(encryptedData);
    }

    // User login authentication code with IP address verification
    public static boolean authenticateUser(String username, String password, String ipAddress) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                PreparedStatement statement = connection.prepareStatement(
                        "SELECT id, username, email, password, ip_address FROM " + USER_TABLE
                                + " WHERE username = ?")) {
            statement.setString(1, username);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    int userId = resultSet.getInt("id");
                    String userEmail = resultSet.getString("email"); // Retrieve user's email
                    String hashedPassword = resultSet.getString("password");
                    String savedIpAddress = resultSet.getString("ip_address");
                    // Verify userername, password, and IP address
                    if (verifyPassword(password, hashedPassword) && ipAddress.equals(savedIpAddress)) {
                        // Store user's email in the session
                        userSession.loginUser(userId, username, userEmail);
                        return true;
                    }
                }
            }
        } catch (SQLException | NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    public static boolean authenticateAdmin(String username, String password) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                PreparedStatement statement = connection.prepareStatement(
                        "SELECT id FROM admins WHERE username = ? AND password = ?")) {
            statement.setString(1, username);
            statement.setString(2, password);
            try (ResultSet resultSet = statement.executeQuery()) {
                return resultSet.next(); // If result set has at least one row, admin authentication is successful
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }
    }

    // User Registration code
    public static boolean registerUser(String email, String username, String password, String ipAddress) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                PreparedStatement statement = connection.prepareStatement(
                        "INSERT INTO " + USER_TABLE + " (email, username, password, ip_address) VALUES (?, ?, ?, ?)")) {
            statement.setString(1, email); // Add email to registration query
            statement.setString(2, username);
            statement.setString(3, hashPassword(password)); // Hashing the password
            statement.setString(4, ipAddress); // Hashing the password
            int rowsAffected = statement.executeUpdate();
            return rowsAffected > 0; // If at least one row is affected, registration succeeds
        } catch (SQLException | NoSuchAlgorithmException ex) {
            ex.printStackTrace();
            return false;
        }
    }

    // Method to validate email address format
    public static boolean isValidEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$";
        Pattern pattern = Pattern.compile(emailRegex);
        Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }

    // Check if the email is already registered
    public static boolean isEmailRegistered(String email) {
        boolean isRegistered = false;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // Establish database connection
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);

            // Prepare SQL statement to check if the email is registered
            String sql = "SELECT COUNT(*) AS count FROM users WHERE email = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, email);

            // Execute the query
            rs = stmt.executeQuery();

            // Check if any rows are returned
            if (rs.next()) {
                int count = rs.getInt("count");
                if (count > 0) {
                    // Email is registered
                    isRegistered = true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle database errors
        } finally {
            // Close the database resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return isRegistered;
    }

    // Check if the username is already taken
    public static boolean isUsernameTaken(String username) {
        boolean isTaken = false;
        Connection conn = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            // Establish database connection
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);

            // Prepare SQL statement to check if the username is taken
            String sql = "SELECT COUNT(*) AS count FROM users WHERE username = ?";
            stmt = conn.prepareStatement(sql);
            stmt.setString(1, username);

            // Execute the query
            rs = stmt.executeQuery();

            // Check if any rows are returned
            if (rs.next()) {
                int count = rs.getInt("count");
                if (count > 0) {
                    // Username is taken
                    isTaken = true;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle database errors
        } finally {
            // Close the database resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return isTaken;
    }

    public static void uploadFileToServer(String filePath, byte[] encryptedData, int userId) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String insertSql = "INSERT INTO " + ENCRYPTED_FILES_TABLE
                    + " (file_name, encrypted_data, user_id) VALUES (?, ?, ?)";
            try (PreparedStatement insertStatement = connection.prepareStatement(insertSql)) {
                insertStatement.setString(1, Paths.get(filePath).getFileName().toString());
                insertStatement.setBytes(2, encryptedData);
                insertStatement.setInt(3, userId); // Include user ID
                insertStatement.executeUpdate();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public static byte[] downloadEncryptedFileFromServer(int fileId, int userId) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                PreparedStatement statement = connection.prepareStatement(
                        "SELECT encrypted_data FROM encrypted_files WHERE file_id = ? AND user_id = ?")) {
            statement.setInt(1, fileId);
            statement.setInt(2, userId);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return resultSet.getBytes("encrypted_data");
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return null;
    }

    private static boolean verifyPassword(String password, String hashedPassword) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] hashedBytes = md.digest(password.getBytes());
        String hashedInputPassword = Base64.getEncoder().encodeToString(hashedBytes);
        return hashedInputPassword.equals(hashedPassword);
    }

    private static String hashPassword(String password) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        byte[] hashedBytes = md.digest(password.getBytes());
        return Base64.getEncoder().encodeToString(hashedBytes);
    }

    public static boolean doesFileExist(String fileName, int userId) {
        boolean exists = false;
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String sql = "SELECT COUNT(*) AS count FROM " + ENCRYPTED_FILES_TABLE
                    + " WHERE file_name = ? AND user_id = ?";
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setString(1, fileName);
                statement.setInt(2, userId);
                try (ResultSet resultSet = statement.executeQuery()) {
                    if (resultSet.next()) {
                        int count = resultSet.getInt("count");
                        exists = count > 0;
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return exists;
    }

    // Method to fetch file data from the server
    public static Object[][] fetchFileData(int userId) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                PreparedStatement statement = connection.prepareStatement(
                        "SELECT file_id, file_name FROM encrypted_files WHERE user_id = ?")) {
            statement.setInt(1, userId);
            try (ResultSet resultSet = statement.executeQuery()) {
                List<Object[]> dataList = new ArrayList<>();
                while (resultSet.next()) {
                    int fileId = resultSet.getInt("file_id");
                    String fileName = resultSet.getString("file_name");
                    dataList.add(new Object[] { fileId, fileName });
                }
                Object[][] fileData = new Object[dataList.size()][2];
                for (int i = 0; i < dataList.size(); i++) {
                    fileData[i] = dataList.get(i);
                }
                return fileData;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return new Object[0][0]; // Return an empty array in case of an error
        }
    }

    public static Object[][] fetchAllUsersData() {
        List<User> userList = new ArrayList<>();

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                PreparedStatement statement = connection.prepareStatement("SELECT id, username, email FROM users");
                ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String username = resultSet.getString("username");
                String email = resultSet.getString("email");
                userList.add(new User(id, username, email));
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        // Convert the list of users to a two-dimensional array
        Object[][] userData = new Object[userList.size()][3];
        for (int i = 0; i < userList.size(); i++) {
            User user = userList.get(i);
            userData[i][0] = user.getId();
            userData[i][1] = user.getUsername();
            userData[i][2] = user.getEmail();
        }

        return userData;
    }

    public static boolean deleteFileFromServer(int fileId, String fileName) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String deleteSql = "DELETE FROM " + ENCRYPTED_FILES_TABLE + " WHERE file_id = ?";
            try (PreparedStatement deleteStatement = connection.prepareStatement(deleteSql)) {
                deleteStatement.setInt(1, fileId);
                int rowsAffected = deleteStatement.executeUpdate();
                return rowsAffected > 0;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }
    }

    public static boolean deleteUser(int userId) {
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            // Delete associated rows in the encrypted_files table
            String deleteFilesSql = "DELETE FROM encrypted_files WHERE user_id = ?";
            try (PreparedStatement deleteFilesStatement = connection.prepareStatement(deleteFilesSql)) {
                deleteFilesStatement.setInt(1, userId);
                deleteFilesStatement.executeUpdate();
            }

            // Now delete the user
            String deleteUserSql = "DELETE FROM users WHERE id = ?";
            try (PreparedStatement deleteUserStatement = connection.prepareStatement(deleteUserSql)) {
                deleteUserStatement.setInt(1, userId);
                int rowsAffected = deleteUserStatement.executeUpdate();
                return rowsAffected > 0;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }
    }

    // Retrieve sender's email from the user session
    public static String getSenderEmail() {
        return userSession.getEmail();
    }

    // Method to generate a secure download link
    public static String generateDownloadLink(String fileName, int fileId, int userId, String linkExpiryTime) {
        // Generate a unique token for the download link
        String token = UUID.randomUUID().toString();

        // Encrypt the file before sharing
        byte[] encryptedFileData = downloadEncryptedFileFromServer(fileId, userId);

        // Save the encrypted file in the download folder
        String downloadFolderPath = "C:/xampp/htdocs/download/"; // Update with your actual download folder path
        String encryptedFileName = fileName.substring(0, fileName.lastIndexOf('.')) + "_encrypted"
                + fileName.substring(fileName.lastIndexOf('.'));
        String encryptedFilePath = downloadFolderPath + encryptedFileName;

        try {
            // Write the encrypted file data to the file
            Files.write(Paths.get(encryptedFilePath), encryptedFileData);
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Save the token, file name, file id, user id, and link expiry time in the
        // database
        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String insertSql = "INSERT INTO download_links (token, file_name, file_id, user_id, link_expiry_time) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement insertStatement = connection.prepareStatement(insertSql)) {
                insertStatement.setString(1, token);
                insertStatement.setString(2, encryptedFileName); // Store the encrypted file name
                insertStatement.setInt(3, fileId);
                insertStatement.setInt(4, userId);
                insertStatement.setTimestamp(5,
                        Timestamp.valueOf(LocalDateTime.now().plusMinutes(Long.parseLong(linkExpiryTime))));
                insertStatement.executeUpdate();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        // Construct and return the download link
        String baseUrl = "http://localhost/download/"; // Replace with your actual domain
        return baseUrl + token;
    }

    private static final String SENDGRID_API_KEY = "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";

    public static void sendEmail(String receiverEmail, String senderEmail, String message) {
        // Email configuration properties
        Properties properties = new Properties();
        properties.put("mail.smtp.host", "smtp.sendgrid.net");
        properties.put("mail.smtp.port", "587");
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");

        // Create a session with authentication
        Session session = Session.getInstance(properties, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication("apikey", SENDGRID_API_KEY);
            }
        });

        try {
            // Create a MimeMessage object
            Message mimeMessage = new MimeMessage(session);
            mimeMessage.setFrom(new InternetAddress(senderEmail));
            mimeMessage.setRecipient(Message.RecipientType.TO, new InternetAddress(receiverEmail));
            mimeMessage.setSubject("File sharing");
            mimeMessage.setText(message);

            // Send the email
            Transport.send(mimeMessage);

            System.out.println("Email sent to: " + receiverEmail);
            System.out.println("Message: " + message);
        } catch (MessagingException e) {
            e.printStackTrace();
            System.err.println("Failed to send email.");
        }
    }
    // Method to fetch IP address
    public static String getIpAddress() {
        try {
            InetAddress localhost = InetAddress.getLocalHost();
            return localhost.getHostAddress();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        return null;
    }
}

Usersession.java - 
/**
 * The `UserSession` class manages user login sessions by storing user information and providing
 * methods to login, logout, and check login status.
 */
package com.securefile;

public class UserSession {
    private static UserSession instance;

    private boolean isLoggedIn;
    private int userId;
    private String username;
    private String email;

    private UserSession() {
        isLoggedIn = false;
    }

    public static UserSession getInstance() {
        if (instance == null) {
            instance = new UserSession();
        }
        return instance;
    }

    public void loginUser(int userId, String username, String email) {
        isLoggedIn = true;
        this.userId = userId;
        this.username = username;
        this.email = email;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public void logoutUser() {
        isLoggedIn = false;
        userId = 0;
        username = null;
        email = null;
    }

    public boolean isLoggedIn() {
        return isLoggedIn;
    }

    public int getUserId() {
        return userId;
    }

    public String getUsername() {
        return username;
    }

    public String getEmail() {
        return email;
    }
}

User.java -
package com.securefile;

public class User {
    private int id;
    private String username;
    private String email;

    public User(int id, String username, String email) {
        this.id = id;
        this.username = username;
        this.email = email;
    }

    // Getters and setters for id, username, and email
    // generate these using your IDE or write them manually
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
